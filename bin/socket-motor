#!/usr/bin/env ruby
require 'rubygems'
require 'json'

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib socket-motor]))

default_config = {
  :logger_broadcast => 'tcp://127.0.0.1:2204',
  
  :nodelets => {
    :ws_listener => {
      :ws_in        => 'ws://0.0.0.0:8080',
      :broadcast_in => 'tcp://127.0.0.1:2200',
      :channels_in  => 'tcp://127.0.0.1:2205',
      :proxy_out    => 'tcp://127.0.0.1:2201',
    },
    :proxy_master => {
       :proxy_in  => 'tcp://127.0.0.1:2201',
       :proxy_out => 'tcp://127.0.0.1:2202'
    },
    :channel_master => {
      :channels_out => 'tcp://127.0.0.1:2205',
      :channels_in  => 'http://127.0.0.1:2206'
    },
    :logger => {
      :logger_in  => 'tcp://127.0.0.1:2204'
    }
  }
}


if ARGV[0]
  unless File.exists?(ARGV[0])
    raise ArgumentError, "Configuration File, '#{ARGV[0]}' could not be found"
  end
   
  puts "Using configuration file '#{ARGV[0]}'"
  parsed = JSON.parse(File.open(ARGV[0]).read)
  config = parsed
  puts "Config: #{config.inspect}"
else
  config = default_config
end

config = Hashie::Mash.new(config)
 
sm = SocketMotor.new config.node
 
sm.configure(config)

sm.start!
 #EM::run { sm.action }
